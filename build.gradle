buildscript {
    ext {
        kotlin_version = '2.1.21'
        kotlin_stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

        androidSettings = [
                min_sdk_version    : 21,
                target_sdk_version : 34,
                compile_sdk_version: 34,
                version_code       : 4
        ]

        libraries = [
                result               : "com.github.kittinunf.result:result:5.6.0",
                retrofit             : "com.squareup.retrofit2:retrofit:3.0.0",
                retrofitConverterGson: "com.squareup.retrofit2:converter-gson:3.0.0",
                browser              : "androidx.browser:browser:1.8.0",
        ]
    }

    repositories {
        gradlePluginPortal()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.10.1'
        classpath "com.google.gms:google-services:4.4.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.dcendents:android-maven-gradle-plugin:2.1"
    }
}

plugins {
    id 'base'
    id 'org.jreleaser' version '1.18.0'
}

apply from: rootProject.file("libversion.gradle")
apply from: rootProject.file("signingkey.gradle")

group = "co.reachfive.identity"
if (project.hasProperty("snapshot")) {
    version = libversion + "-SNAPSHOT"
} else {
    version = libversion
}

subprojects {
    apply plugin: "com.android.library"
    apply plugin: "kotlin-android"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    repositories {
        google()
        mavenCentral()
    }

    android {

        compileSdkVersion androidSettings.compile_sdk_version

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = '1.8'
        }

        buildFeatures {
            buildConfig true
        }

        defaultConfig {
            minSdkVersion androidSettings.min_sdk_version
            targetSdkVersion androidSettings.target_sdk_version
            versionCode androidSettings.version_code
            versionName this.version
            buildConfigField("String", "r5_sdk_version", "\"$libversion\"")
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            }
        }

        lintOptions {
            abortOnError false
        }
    }

    afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) {
                    from components.release

                    pom {
                        name = 'ReachFive'
                        description = 'SDK'
                        inceptionYear = '2019'
                        url = 'https://github.com/ReachFive/identity-android-sdk'

                        groupId = this.group
                        version = this.version
                        packaging = 'aar'

                        licenses {
                            license {
                                name = 'The MIT License (MIT)'
                                url = 'https://opensource.org/licenses/MIT'
                            }
                        }

                        scm {
                            connection = 'https://github.com/ReachFive/identity-android-sdk.git'
                            url = 'https://github.com/ReachFive/identity-android-sdk'

                        }

                        developers {
                            developer {
                                id = 'reachfive'
                                name = 'Reachfive'
                            }
                        }
                    }
                }
            }

            repositories {
                maven {
                    name = 'localStaging'
                    url = layout.buildDirectory.dir('staging-deploy')
                }
                maven {
                    name = 'sonatypeSnapshots'
                    url = 'https://central.sonatype.com/repository/maven-snapshots/'
                    credentials {
                        username = sonatypeUsername
                        password = sonatypePassword
                    }
                }
            }
        }

        if (signingKey != null) {
            signing {
                useInMemoryPgpKeys(signingKey, signingKeyPassphrase)
                sign publishing.publications.release
            }
        }

        jreleaser {
            signing {
                active = 'ALWAYS'
                armored = true
                passphrase = signingKeyPassphrase
                secretKey = signingKey
                publicKey = signingKeyPublic
            }
            deploy {
                maven {
                    mavenCentral {
                        sonatype {
                            active = 'RELEASE'
                            url = 'https://central.sonatype.com/api/v1/publisher'
                            stagingRepository(layout.buildDirectory.dir("staging-deploy").get().toString())
                            username = sonatypeUsername
                            password = sonatypePassword
                            verifyPom = false
                        }
                    }
                }
            }
        }
    }
}
